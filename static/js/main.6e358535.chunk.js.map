{"version":3,"sources":["components/Form.js","components/Todo.js","components/TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["Form","setInputText","setTodos","todos","inputText","setStatus","value","placeholder","onChange","e","console","log","target","type","className","onClick","preventDefault","text","completed","id","Math","random","name","Todo","todo","map","item","filter","el","TodoList","filteredTodos","App","useState","status","setFilteredTodos","useEffect","getLocalTodos","filterHandler","saveLocalTodos","localStorage","setItem","JSON","stringify","getItem","todoLocal","parse","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6e358535.chunk.js","sourcesContent":["import React from 'react';\n\n\n\nconst Form = ({setInputText, setTodos, todos, inputText, setStatus}) => {\n// Here we will write javascript function.\n\nconst inputTextHandler = (e) => {\n  console.log(e.target.value);\n  setInputText(e.target.value);\n};\n\n\n//this event (e) will give info about what been enter in the input. \nconst submitTodoHandler = (e) => { \n//this will prevent the page form refreshing. to keep the input value.\n  e.preventDefault();\n  setTodos([\n    ...todos, {text: inputText, completed: false, id: Math.random() * 1000}\n  ]);\n  setInputText(\" \");\n};\n\nconst statusHandler = (e) => {\n  setStatus(e.target.value);\n\n}\n\nreturn(\n  //add onChange function to the input will fire the event that we create in the const. and gives update about whats been input\n    <form>\n  \n      <input value={inputText} placeholder=\"add tasks.....\" onChange={inputTextHandler} type=\"text\" className=\"todo-input\" />\n      <button onClick={submitTodoHandler}  className=\"todo-button aria-label=left Align\" type=\"submit\" name=\"button\" >\n        <i className=\"fas fa-plus-circle\"></i>\n      </button>\n      <div className=\"select\">\n        <select onChange={statusHandler} name=\"todos\" className=\"filter-todo\">\n          <option value=\"all\">All</option>\n          <option value=\"completed\">Completed</option>\n          <option value=\"uncompleted\">Uncompleted</option>\n        </select>\n      </div>\n    </form>\n);\n\n}\n\nexport default Form; \n\n\n//1. after create a onChange function now we need to go to the useState and pass the setInputText function in the form thats mean this function will update what ever been there in the inputText (the data we need to put inside the Set Func.).\n//2. now after we add the setInputText sate function in the form, we can access it from the form app, by passing it inside the form {setInputText}. Now we can pass the information of the setInputText in the e target.\n//3. now we have teh setInputText the piece of state that we can use it in any place in the app.\n//4. now we will pass the state to do list that we can show whats inside the input.\n//5. Heading to the App, we need to create another state that will store the todos. ","import React from 'react';\n\nconst Todo = ({text, todo ,todos, setTodos}) => {\n//Event \nconst deleteHandler = () => {\nsetTodos(todos.filter((el) => el.id !== todo.id));\n\n};\n\nconst completeHandler = () => {\n\nsetTodos(todos.map(item => {\n\n    if(item.id === todo.id) {\n        return {\n            ...item, completed: !item.completed\n\n        }\n    }\nreturn item;\n\n\n}));\n\n};\n\n\n\n    return (\n\n        <div className=\"todo\">\n            <li className={`todo-item ${todo.completed  ? \"completed\" : \"\"}`}>{text}</li>\n            <button onClick={completeHandler} className=\"complete-btn\">\n                <li className=\"fas fa-check\"></li>\n            </button>\n            <button onClick={deleteHandler} className=\"trash-btn\">\n                <li className=\"fas fa-trash\"></li>\n            </button>\n        </div>\n\n    );\n\n}\n\nexport default Todo;","import React from 'react';\nimport Todo from './Todo';\n\nconst TodoList = ({ todos, setTodos, filteredTodos }) => {\n\n    return(\n        <div className=\"todo-container\">\n            <ul  className=\"todo-list\">\n            \n            {\n                filteredTodos.map(todo => (\n\n                    <Todo \n                    setTodos={setTodos} \n                    todos={todos} \n                    key={todo.id} \n                    todo={todo}\n                    text={todo.text} />\n\n                )) }\n\n            </ul>\n        </div>\n\n    );\n}\n\nexport default TodoList;\n\n\n//Here we will get all the piece of state and render it here.\n//now for each to do in the map we will render out todo component.\n","//we need to get what ever we type in the input and save it in to a state.\n\n\nimport React, {useState, useEffect} from 'react';\nimport './App.css';\nimport Form from './components/Form';\nimport TodoList from './components/TodoList';\n\nfunction App() {\n  //useState for the textInput value to set it in a state. and the function setInputText that allow change the inputText value and update it. and this state will reset every time we hit submit. \n\n\n//state \n  const [inputText, setInputText] = useState (\"\");\n  //store todos in another state. will be an array.\n  const [todos, setTodos]= useState([]);\n  const [status, setStatus] = useState (\"all\");\n  const [filteredTodos, setFilteredTodos] = useState([]);\n\n\n  //Run Once when the app start\nuseEffect (()=> {\n\ngetLocalTodos();\n}, []);\n\n\n//use Effect\n  useEffect (()=> {\n\n    filterHandler();\n    saveLocalTodos();\n\n  }, [todos, status]);\n\n\n\n//functions\nconst filterHandler = () => {\n  switch(status) {\n  case \"completed\":\n    setFilteredTodos(todos.filter(todo => todo.completed === true));\n  break;\n\n  case \"uncompleted\":\n    setFilteredTodos(todos.filter(todo => todo.completed === false));\n    break;\n    default:\n      setFilteredTodos(todos);\n      break;\n  }\n};\n\n//save to local \n\nconst saveLocalTodos = () => {\n  \n    localStorage.setItem(\"todos\", JSON.stringify(todos));\n\n\n};\n\nconst getLocalTodos = () => {\n  if (localStorage.getItem('todos') === null){\n    localStorage.setItem('todos', JSON.stringify([]));\n\n  }else {\n   let todoLocal =  JSON.parse(localStorage.getItem(\"todos\"));\n    setTodos(todoLocal);\n  \n  }\n\n\n};\n\n  return (\n    <div className=\"App\">\n      <header>\n     <h1>Todo List</h1>\n     </header>\n     <Form \n     inputText={inputText} \n     todos={todos} \n     setTodos={setTodos} \n     setInputText={setInputText}\n     setStatus ={setStatus}\n     />\n     <TodoList \n     \n     setTodos={setTodos} \n     todos={todos}\n     filteredTodos={filteredTodos}\n     \n     />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n\n\nreportWebVitals();\n"],"sourceRoot":""}